import sys
import argparse

parser = argparse.ArgumentParser(prog='Segno Processor')
parser.add_argument('--grammar_py',        required=True,  help='location of the python generated by antlr')
parser.add_argument('--input',             required=True,  help='location of the input file')
parser.add_argument('--out_debug',         required=False, help='output path for debug info')
parser.add_argument('--out_cxx_decl' ,     required=False, help='output path for the cxx declarative header file')
parser.add_argument('--out_cxx_impl',      required=False, help='output path for the cxx implementation header file')
parser.add_argument('--out_cxx_cpp',       required=False, help='output path for the cxx source file')
parser.add_argument('--out_cxx_bind_nano', required=False, help='output path for the cxx bindings used by nanobind')
parser.add_argument('--verbose',           required=False, help='enable verbose log printing', action='store_true')
args = parser.parse_args()

sys.path.insert(0, args.grammar_py)

import antlr4
from segno_grammarLexer   import segno_grammarLexer
from segno_grammarParser  import segno_grammarParser

from segno.sg_listener import *
if args.verbose:
  from segno.sg_listener_debug import *

with open(args.input) as file:
  data = file.read()
  
lexer  = segno_grammarLexer(antlr4.InputStream(data))
stream = antlr4.CommonTokenStream(lexer)
parser = segno_grammarParser(stream)
tree   = parser.prog()

# debug
if args.verbose:
  print("Verbose tree:")
  listener = sg_listener_debug(parser)
  walker   = antlr4.ParseTreeWalker()
  walker.walk(listener, tree)
  print()

listener = sg_listener(parser)
walker   = antlr4.ParseTreeWalker()
walker.walk(listener, tree)

from segno.writer_ctx import writer_ctx

if args.out_cxx_decl:
  from segno.generator_cxx_decl import generator_cxx_decl
  with open(args.out_cxx_decl, 'w') as f:
    ctx = writer_ctx(f)
    gen = generator_cxx_decl(ctx)
    gen.write_document(listener.translation_unit)
    
if args.out_cxx_impl:
  from segno.generator_cxx_impl import generator_cxx_impl
  with open(args.out_cxx_impl, 'w') as f:
    ctx = writer_ctx(f)
    gen = generator_cxx_impl(ctx)
    gen.write_document(listener.translation_unit)
    
if args.out_cxx_cpp:
  from segno.generator_cxx_cpp  import generator_cxx_cpp
  with open(args.out_cxx_cpp, 'w') as f:
    ctx = writer_ctx(f)
    gen = generator_cxx_cpp(ctx)
    gen.write_document(listener.translation_unit)
    
if args.out_cxx_bind_nano:
  from segno.generator_cxx_bind_nano  import generator_cxx_bind_nano
  with open(args.out_cxx_bind_nano, 'w') as f:
    ctx = writer_ctx(f)
    gen = generator_cxx_bind_nano(ctx)
    gen.write_document(listener.translation_unit)
